(self.webpackChunkdocusaurus_template=self.webpackChunkdocusaurus_template||[]).push([[3197],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9994:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={id:"logging",title:"Logs and Audit Trails"},l={unversionedId:"ecosystem/logging",id:"ecosystem/logging",isDocsHomePage:!1,title:"Logs and Audit Trails",description:"This feature has not yet shipped to all projects but we are working on",source:"@site/docs/ecosystem/logging.mdx",sourceDirName:"ecosystem",slug:"/ecosystem/logging",permalink:"/docs/ecosystem/logging",editUrl:"https://github.com/ory/docs/edit/master/docs/docs/ecosystem/logging.mdx",version:"current",lastUpdatedBy:"Vincent",lastUpdatedAt:1621622470,formattedLastUpdatedAt:"5/21/2021",frontMatter:{id:"logging",title:"Logs and Audit Trails"}},s=[{value:"Traces",id:"traces",children:[]},{value:"Log Fields",id:"log-fields",children:[{value:"Audience",id:"audience",children:[]},{value:"HTTP Request Context",id:"http-request-context",children:[]}]}],p={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This feature has not yet shipped to all projects but we are working on\nhomogenizing log output across the ecosystem."))),(0,o.kt)("p",null,"Log output is sent to stdout/stderr. There is no option to change the log\ndestination. You should use bash pipes instead, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ hydra serve all >log.txt 2>&1\n")),(0,o.kt)("p",null,"Log configuration happens via environment variables ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_FORMAT"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEAK_SENSITIVE_VALUES")," or the configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="path/to/config.yml"',title:'"path/to/config.yml"'},"log:\n  level: info\n  format: text\n  leak_sensitive_values: false\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"level")," configuration key supports the following values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"panic"),": highest level of severity. This event is so rare that it is, with\nalmost absolute certainty, unlikely for you to encounter ever."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fatal"),": the program is unable to continue execution and ended with a fatal\nstate. Can happen when the configuration is invalid, for example."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error"),": used for errors that should definitely be noted."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"warn"),": non-critical entries that deserve eyes."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"info"),": general operational entries about what's going on inside the\napplication."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"debug"),": usually only enabled when debugging. Very verbose logging. If ",(0,o.kt)("inlineCode",{parentName:"li"},"json"),"\nis the log format, the JSON will be prettified for better readability."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"trace"),": designates finer-grained informational events than debug. Includes\ncall traces of errors and log calls.")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"format")," configuration key supports ",(0,o.kt)("inlineCode",{parentName:"p"},"text")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"time=2020-05-20T11:57:09+02:00 level=info msg=An example log message. audience=application service_name=foo service_version=bar\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{"audience":"application","level":"info","msg":"An example log message.","service_name":"foo","service_version":"bar","time":"2020-05-20T11:56:57+02:00"}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"leak_sensitive_values")," configuration key should always be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".\nIf set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", sensitive data such as Personally Identifiable Information\n(PII), secrets, tokens, and others will be leaked to the logs. This is only\nuseful for debugging on development environments or with a very narrow scope. If\nset to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," you must ensure that the output is not stored or cached anywhere."),(0,o.kt)("h2",{id:"traces"},"Traces"),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL=trace"),", traces will be included for log calls and errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "audience": "application",\n  "error": {\n    "message": "example error",\n    "trace": "\\ngithub.com/ory/x/logrusx.TestErrorTrace.func1\\n\\t/Users/foobar/go/src/github.com/ory/x/logrusx/logrus_test.go:52\\nnet/http.HandlerFunc.ServeHTTP\\n\\t/usr/local/Cellar/go/1.14.2_1/libexec/src/net/http/server.go:2012\\nnet/http.serverHandler.ServeHTTP\\n\\t/usr/local/Cellar/go/1.14.2_1/libexec/src/net/http/server.go:2807\\nnet/http.(*conn).serve\\n\\t/usr/local/Cellar/go/1.14.2_1/libexec/src/net/http/server.go:1895\\nruntime.goexit\\n\\t/usr/local/Cellar/go/1.14.2_1/libexec/src/runtime/asm_amd64.s:1373"\n  },\n  "file": "/Users/user/go/src/github.com/ory/x/logrusx/logrus_test.go:52",\n  "func": "github.com/ory/x/logrusx.TestErrorTrace.func1",\n  "level": "error",\n  "msg": "I am an example error",\n  "service_name": "foo",\n  "service_version": "bar",\n  "time": "2020-05-20T12:13:53+02:00"\n}\n')),(0,o.kt)("h2",{id:"log-fields"},"Log Fields"),(0,o.kt)("p",null,"Ory provides as much context as possible for each log operation."),(0,o.kt)("h3",{id:"audience"},"Audience"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"audience")," field distinguishes between ",(0,o.kt)("inlineCode",{parentName:"p"},"application")," logs intended for\noperators and developers, and ",(0,o.kt)("inlineCode",{parentName:"p"},"audit")," logs that document allowed and denied\nauthorizations, failed and succeeded log in attempts, and so on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"time=2020-05-20T11:57:09+02:00 level=info msg=An example log message. audience=application service_name=foo service_version=bar\ntime=2020-05-20T11:57:29+02:00 level=info msg=Login successful. audience=audit service_name=foo service_version=bar\n")),(0,o.kt)("h3",{id:"http-request-context"},"HTTP Request Context"),(0,o.kt)("p",null,"We include vital HTTP request info whenever possible:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Important HTTP ",(0,o.kt)("inlineCode",{parentName:"li"},"headers"),". Headers ",(0,o.kt)("inlineCode",{parentName:"li"},"Authorization")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Cookie")," are redacted\nper default and we do include defacto standards such as ",(0,o.kt)("inlineCode",{parentName:"li"},"X-Request-ID"),",\n",(0,o.kt)("inlineCode",{parentName:"li"},"X-Forwarded-For"),", ..."),(0,o.kt)("li",{parentName:"ul"},"HTTP ",(0,o.kt)("inlineCode",{parentName:"li"},"method")," (",(0,o.kt)("inlineCode",{parentName:"li"},"POST"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"GET"),", ...);"),(0,o.kt)("li",{parentName:"ul"},"HTTP ",(0,o.kt)("inlineCode",{parentName:"li"},"scheme")," (",(0,o.kt)("inlineCode",{parentName:"li"},"https")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"http"),");"),(0,o.kt)("li",{parentName:"ul"},"HTTP ",(0,o.kt)("inlineCode",{parentName:"li"},"remote")," IP Address;"),(0,o.kt)("li",{parentName:"ul"},"HTTP ",(0,o.kt)("inlineCode",{parentName:"li"},"host"),";"),(0,o.kt)("li",{parentName:"ul"},"HTTP request path;"),(0,o.kt)("li",{parentName:"ul"},"request query (redacted per default);")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'time=2020-05-20T12:20:10+02:00 level=info msg=I am an example log audience=application http_request=map[headers:map[accept-encoding:gzip user-agent:Go-http-client/1.1] host:127.0.0.1:52286 method:GET path:/foo/bar query:Value is sensitive and has been redacted. To see the value set config key "log.leak_sensitive_values = true" or environment variable "LOG_LEAK_SENSITIVE_VALUES=true". remote:127.0.0.1:52287 scheme:http] service_name=foo service_version=bar\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "audience": "application",\n  "http_request": {\n    "headers": {\n      "accept-encoding": "gzip",\n      "user-agent": "Go-http-client/1.1"\n    },\n    "host": "127.0.0.1:52267",\n    "method": "GET",\n    "path": "/foo/bar",\n    "query": "Value is sensitive and has been redacted. To see the value set config key \\"log.leak_sensitive_values = true\\" or environment variable \\"LOG_LEAK_SENSITIVE_VALUES=true\\".",\n    "remote": "127.0.0.1:52268",\n    "scheme": "http"\n  },\n  "level": "info",\n  "msg": "I am an example log",\n  "service_name": "foo",\n  "service_version": "bar",\n  "time": "2020-05-20T12:17:04+02:00"\n}\n')))}c.isMDXComponent=!0}}]);