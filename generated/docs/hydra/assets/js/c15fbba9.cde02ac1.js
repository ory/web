(self.webpackChunkdocusaurus_template=self.webpackChunkdocusaurus_template||[]).push([[70623],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(i,".").concat(h)]||u[h]||p[h]||l;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},46715:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=n(22122),r=n(19756),l=(n(67294),n(3905)),o=["components"],s={id:"kubernetes-helm-chart",title:"Kubernetes Helm Chart"},i=void 0,d={unversionedId:"guides/kubernetes-helm-chart",id:"version-v1.7/guides/kubernetes-helm-chart",isDocsHomePage:!1,title:"Kubernetes Helm Chart",description:"The ORY Hydra Helm Chart helps you deploy ORY Hydra on Kubernetes using Helm.",source:"@site/versioned_docs/version-v1.7/guides/kubernetes-helm-chart.mdx",sourceDirName:"guides",slug:"/guides/kubernetes-helm-chart",permalink:"/hydra/docs/v1.7/guides/kubernetes-helm-chart",editUrl:"https://github.com/ory/hydra/edit/master/docs/versioned_docs/version-v1.7/guides/kubernetes-helm-chart.mdx",version:"v1.7",lastUpdatedBy:"aeneasr",lastUpdatedAt:1597407772,formattedLastUpdatedAt:"8/14/2020",frontMatter:{id:"kubernetes-helm-chart",title:"Kubernetes Helm Chart"},sidebar:"version-v1.7/docs",previous:{title:"Secrets and Key Rotation",permalink:"/hydra/docs/v1.7/guides/secrets-key-rotation"},next:{title:"SSL/TLS, HTTPS, Self-Signed Certificates",permalink:"/hydra/docs/v1.7/guides/ssl-https-tls"}},c=[{value:"Installation",id:"installation",children:[{value:"With SQL Database",id:"with-sql-database",children:[]},{value:"With Google Cloud SQL",id:"with-google-cloud-sql",children:[]}]},{value:"Configuration",id:"configuration",children:[]},{value:"Examples",id:"examples",children:[{value:"Exemplary Login and Consent App",id:"exemplary-login-and-consent-app",children:[]},{value:"Hydra Maester",id:"hydra-maester",children:[]}]}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ORY Hydra Helm Chart helps you deploy ORY Hydra on Kubernetes using Helm.\nThe source code is available on\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ory/k8s"},"github.com/ory/k8s"),"."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"To install ORY Hydra, the following\n",(0,l.kt)("a",{parentName:"p",href:"https://www.ory.sh/hydra/docs/reference/configuration"},"configuration values"),"\nmust be set:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hydra.config.dsn")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hydra.config.urls.self.issuer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hydra.config.urls.login")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hydra.config.urls.consent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hydra.config.secrets.system"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"NOTE:")," If no ",(0,l.kt)("inlineCode",{parentName:"p"},"hydra.config.secrets.system")," secrets is supplied and\n",(0,l.kt)("inlineCode",{parentName:"p"},"hydra.existingSecret")," is empty, a secret is generated automatically. The\ngenerated secret is cryptographically secure, and 32 signs long.")),(0,l.kt)("p",null,"If you wish to install ORY Hydra with an in-memory database, a cryptographically\nstrong secret, a Login and Consent provider located at ",(0,l.kt)("inlineCode",{parentName:"p"},"https://my-idp/")," run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    --set 'hydra.config.secrets.system=$(LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | base64 | head -c 32)' \\\n    --set 'hydra.config.dsn=memory' \\\n    --set 'hydra.config.urls.self.issuer=https://my-hydra/' \\\n    --set 'hydra.config.urls.login=https://my-idp/login' \\\n    --set 'hydra.config.urls.consent=https://my-idp/consent' \\\n    ory/hydra\n")),(0,l.kt)("p",null,"You can optionally also set the cookie secrets:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    ...\n    --set 'hydra.config.secrets.cookie=$(LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | base64 | head -c 32)' \\\n    ...\n    ory/hydra\n")),(0,l.kt)("p",null,"Alternatively, you can use an existing\n",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/secret/"},"Kubernetes Secret"),"\ninstead of letting the Helm Chart create one for you:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"\n$ kubectl create secret generic my-secure-secret --from-literal=dsn=postgres://foo:bar@baz:1234/db \\\n    --from-literal=secretsCookie=$(LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | base64 | head -c 32) \\\n    --from-literal=secretsSystem=$(LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | base64 | head -c 32)\n\n$ helm install \\\n    ...\n    --set 'hydra.existingSecret=my-secure-secret' \\\n    ...\n    ory/hydra\n")),(0,l.kt)("h3",{id:"with-sql-database"},"With SQL Database"),(0,l.kt)("p",null,"To run ORY Hydra against a SQL database, set the connection string. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    ...\n    --set 'dsn=postgres://foo:bar@baz:1234/db' \\\n    ory/hydra\n")),(0,l.kt)("p",null,"This chart does not require MySQL, PostgreSQL, or CockroachDB as dependencies\nbecause we strongly encourage you not to run a database in Kubernetes but\ninstead recommend to rely on a managed SQL database such as Google Cloud SQL or\nAWS Aurora."),(0,l.kt)("h3",{id:"with-google-cloud-sql"},"With Google Cloud SQL"),(0,l.kt)("p",null,"To connect to Google Cloud SQL, you could use the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rimusz/charts/tree/master/stable/gcloud-sqlproxy"},(0,l.kt)("inlineCode",{parentName:"a"},"gcloud-sqlproxy")),"\nchart:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm upgrade pg-sqlproxy rimusz/gcloud-sqlproxy --namespace sqlproxy \\\n    --set 'serviceAccountKey=\"$(cat service-account.json | base64 | tr -d '\\n')\"' \\\n    ...\n")),(0,l.kt)("p",null,"When bringing up ORY Hydra, set the host to ",(0,l.kt)("inlineCode",{parentName:"p"},"pg-sqlproxy-gcloud-sqlproxy")," as\ndocumented\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rimusz/charts/tree/master/stable/gcloud-sqlproxy#installing-the-chart"},"here"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    ...\n    --set 'dsn=postgres://foo:bar@pg-sqlproxy-gcloud-sqlproxy:5432/db' \\\n    ory/hydra\n")),(0,l.kt)("h2",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"You can pass your\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ory/hydra/blob/master/docs/config.yaml"},"ORY Hydra configuration file"),"\nby creating a yaml file with key ",(0,l.kt)("inlineCode",{parentName:"p"},"hydra.config")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# hydra-config.yaml\n\nhydra:\n  config:\n    # e.g.:\n    ttl:\n      access_token: 1h\n    # ...\n")),(0,l.kt)("p",null,"and passing that as a value override to helm:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install -f ./path/to/hydra-config.yaml ory/hydra\n")),(0,l.kt)("p",null,"Additionally, the following extra settings are available:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"autoMigrate")," (bool): If enabled, an ",(0,l.kt)("inlineCode",{parentName:"li"},"initContainer")," running\n",(0,l.kt)("inlineCode",{parentName:"li"},"hydra migrate sql")," will be created."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dangerousForceHttp")," (bool): If enabled, sets the ",(0,l.kt)("inlineCode",{parentName:"li"},"--dangerous-force-http"),"\nflag on ",(0,l.kt)("inlineCode",{parentName:"li"},"hydra serve all"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dangerousAllowInsecureRedirectUrls")," (string[]): Sets the\n",(0,l.kt)("inlineCode",{parentName:"li"},"--dangerous-allow-insecure-redirect-urls")," flag on ",(0,l.kt)("inlineCode",{parentName:"li"},"hydra serve all"),".")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"exemplary-login-and-consent-app"},"Exemplary Login and Consent App"),(0,l.kt)("p",null,"This tutorial assumes that you're running Minikube locally. If you're not\nrunning Kubernetes locally, please adjust the hostnames accordingly."),(0,l.kt)("p",null,"Let's install the Login and Consent App first"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    --set 'hydraAdminUrl=http://hydra-example-admin:4445/' \\\n    --set 'hydraPublicUrl=http://public.hydra.localhost/' \\\n    --set 'ingress.enabled=true' \\\n    --name hydra-example-idp \\\n    ory/example-idp\n")),(0,l.kt)("p",null,"with hostnames"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"http://hydra-example-api:4445/")," corresponding to deployment name\n",(0,l.kt)("inlineCode",{parentName:"li"},"--name hydra-example")," (see next code sample) with suffix ",(0,l.kt)("inlineCode",{parentName:"li"},"-admin")," which is\nthe hostname of the ORY Hydra Admin API Service."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"https://public.hydra.localhost/")," which is the default value for\n",(0,l.kt)("inlineCode",{parentName:"li"},"ingress.public.hosts[0].host")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"ory/hydra")," ( see next code sample).")),(0,l.kt)("p",null,"Next install ORY Hydra. Please note that SSL is disabled using\n",(0,l.kt)("inlineCode",{parentName:"p"},"--set hydra.dangerousForceHttp=true")," which should never be done when working\noutside of ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost")," and only for testing and demonstration purposes. Install\nthe ORY Hydra Helm Chart"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    --set 'hydra.config.secrets.system=$(LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | base64 | head -c 32)' \\\n    --set 'hydra.config.dsn=memory' \\\n    --set 'hydra.config.urls.self.issuer=http://public.hydra.localhost/' \\\n    --set 'hydra.config.urls.login=http://example-idp.localhost/login' \\\n    --set 'hydra.config.urls.consent=http://example-idp.localhost/consent' \\\n    --set 'hydra.config.urls.logout=http://example-idp.localhost/logout' \\\n    --set 'ingress.public.enabled=true' \\\n    --set 'ingress.admin.enabled=true' \\\n    --set 'hydra.dangerousForceHttp=true' \\\n    --name hydra-example \\\n    ory/hydra\n")),(0,l.kt)("p",null,"with hostnames"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"example-idp.localhost")," which is the default for ",(0,l.kt)("inlineCode",{parentName:"li"},"ingress.hosts[0].host")," from\n",(0,l.kt)("inlineCode",{parentName:"li"},"ory/example-idp"),".")),(0,l.kt)("p",null,"If running Minikube, enable the Ingress addon"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ minikube addons enable ingress\n")),(0,l.kt)("p",null,"and get the IP addresses for the Ingress controllers with (you may need to wait\na bit)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get ing\nNAME                   HOSTS                    ADDRESS        PORTS   AGE\nhydra-example-idp      example-idp.localhost    192.168.64.3   80      3m47s\nhydra-example-public   public.hydra.localhost   192.168.64.3   80      35s\nhydra-example-admin    admin.hydra.localhost    192.168.64.3   80      35s\n")),(0,l.kt)("p",null,"or alternatively with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ minikube ip192.168.64.3\n\n")),(0,l.kt)("p",null,"next route the hostnames to the IP Address from above by editing, for example\n",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/hosts"),". The result should look something like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat /etc/hosts\n127.0.0.1       localhost\n255.255.255.255 broadcasthost\n::1             localhost\n# ...\n192.168.64.3    example-idp.localhost\n192.168.64.3    admin.hydra.localhost\n192.168.64.3    public.hydra.localhost\n")),(0,l.kt)("p",null,"Please note that file contents will be different on every operating system and\nnetwork. Now, confirm that everything is working:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl http://example-idp.localhost/\nhttp://public.hydra.localhost/.well-known/openid-configuration\n")),(0,l.kt)("p",null,"Next, you can follow the\n",(0,l.kt)("a",{parentName:"p",href:"https://www.ory.sh/docs/hydra/5min-tutorial"},"5 Minute Tutorial"),", skipping the\n",(0,l.kt)("inlineCode",{parentName:"p"},"git")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"docker-compose")," set up sections. Assuming you have ORY Hydra\ninstalled locally, you can rewrite commands from, for example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose -f quickstart.yml exec hydra \\\n      hydra clients create \\\n      --endpoint http://127.0.0.1:4445/ \\\n      --id my-client \\\n      --secret secret \\\n      -g client_credentials\n\n$ docker-compose -f quickstart.yml exec hydra \\\n      hydra token client \\\n      --endpoint http://127.0.0.1:4444/ \\\n      --client-id my-client \\\n      --client-secret secret\n")),(0,l.kt)("p",null,"to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ hydra clients create \\\n    --endpoint http://admin.hydra.localhost/ \\\n    --id my-client \\\n    --secret secret \\\n    -g client_credentials\n\n$ hydra token client \\\n    --endpoint http://public.hydra.localhost/ \\\n    --client-id my-client \\\n    --client-secret secret\n")),(0,l.kt)("h3",{id:"hydra-maester"},"Hydra Maester"),(0,l.kt)("p",null,"This chart includes a helper chart in the form of\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ory/k8s/blob/master/docs/helm/hydra-maester.md"},"Hydra Maester"),",\na Kubernetes controller, which manages OAuth2 clients using the\n",(0,l.kt)("inlineCode",{parentName:"p"},"oauth2clients.hydra.ory.sh")," custom resource. By default, this component is\nenabled and installed together with Hydra. However, it can be disabled by\nsetting the proper flag:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install \\\n    --set 'maester.enabled=false' \\\n    ory/hydra\n")),(0,l.kt)("h4",{id:"using-fullnameoverride"},"Using fullnameOverride"),(0,l.kt)("p",null,"If you use need to override the name of the hydra resources such as the\ndeployment or services, the traditional ",(0,l.kt)("inlineCode",{parentName:"p"},"fullnameOverride")," value is available."),(0,l.kt)("p",null,"If you use it and deploy maester as part of hydra, make sure you also set\n",(0,l.kt)("inlineCode",{parentName:"p"},"maester.hydraFullnameOverride")," with the same value, so that the admin service\nname used by maester is properly computed with the new value."),(0,l.kt)("p",null,"Should you forget, helm will fail and remind you to."))}u.isMDXComponent=!0}}]);