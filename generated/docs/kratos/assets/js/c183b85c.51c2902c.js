(self.webpackChunkdocusaurus_template=self.webpackChunkdocusaurus_template||[]).push([[3913],{58215:function(e,n,t){"use strict";var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},55064:function(e,n,t){"use strict";t.d(n,{Z:function(){return u}});var a=t(67294),i=t(79443);var o=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(86010),r="tabItem_1uMI",l="tabItemActive_2DSg";var c=37,d=39;var u=function(e){var n=e.lazy,t=e.block,i=e.defaultValue,u=e.values,p=e.groupId,f=e.className,m=o(),h=m.tabGroupChoices,g=m.setTabGroupChoices,w=(0,a.useState)(i),v=w[0],b=w[1],k=a.Children.toArray(e.children),y=[];if(null!=p){var T=h[p];null!=T&&T!==v&&u.some((function(e){return e.value===T}))&&b(T)}var N=function(e){var n=e.currentTarget,t=y.indexOf(n),a=u[t].value;b(a),null!=p&&(g(p,a),setTimeout((function(){var e,t,a,i,o,s,r,c;(e=n.getBoundingClientRect(),t=e.top,a=e.left,i=e.bottom,o=e.right,s=window,r=s.innerHeight,c=s.innerWidth,t>=0&&o<=c&&i<=r&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(l),setTimeout((function(){return n.classList.remove(l)}),2e3))}),150))},x=function(e){var n,t;switch(e.keyCode){case d:var a=y.indexOf(e.target)+1;t=y[a]||y[0];break;case c:var i=y.indexOf(e.target)-1;t=y[i]||y[y.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},f)},u.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,className:(0,s.Z)("tabs__item",r,{"tabs__item--active":v===n}),key:n,ref:function(e){return y.push(e)},onKeyDown:x,onFocus:N,onClick:N},t)}))),n?(0,a.cloneElement)(k.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==v})}))))}},79443:function(e,n,t){"use strict";var a=(0,t(67294).createContext)(void 0);n.Z=a},88821:function(e,n,t){"use strict";var a=t(67294);n.Z=function(){return a.createElement("div",{className:"admonition admonition-warning alert alert--danger"},a.createElement("div",{className:"admonition-heading"},a.createElement("h5",null,a.createElement("span",{className:"admonition-icon"},a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),a.createElement("div",{className:"admonition-content"},a.createElement("p",null,"Never use API flows to implement Browser applications! Using API flows in Single-Page-Apps as well as server-side apps opens up several potential attack vectors, including Login and other CSRF attacks.")))}},12669:function(e,n,t){"use strict";var a=t(55064),i=t(58215),o=t(67294),s=t(11756),r=t(73295),l=t(25108),c=function(e){var n=e.item;return n.code?(l.warn(n.code,"asfd"),o.createElement(s.Z,{className:"language-"+n.language,children:n.code})):n.image?o.createElement("img",{src:n.image,alt:n.alt}):n.codeFromRemote?o.createElement(r.Z,{language:n.language,link:n.codeFromRemote.link,src:n.codeFromRemote.src}):o.createElement("span",null,"Unknown item type: $",JSON.stringify(n))};n.Z=function(e){var n=e.items;return o.createElement(a.Z,{defaultValue:Object.keys(n)[0],values:Object.keys(n).map((function(e){return{label:n[e].label,value:e}}))},Object.keys(n).map((function(e){return o.createElement(i.Z,{key:e,value:e},o.createElement(c,{item:n[e]}))})))}},73295:function(e,n,t){"use strict";t.d(n,{Z:function(){return d}});var a=t(67294),i=t(83300),o=t.n(i),s=t(11756),r="container_2x1S",l=t(25108),c=function(e,n){if(!e)return 0;var t=n.findIndex((function(n){return n.indexOf(e)>-1}));return-1===t?0:t},d=function(e){var n=e.src,t=e.title,i=(0,a.useState)(""),d=i[0],u=i[1];(0,a.useEffect)((function(){var t,a,i;o()(n.replace("github.com","raw.githubusercontent.com").replace("/blob/","/")).then((function(e){return e.text()})).then((t=e,a=t.startAt,i=t.endAt,function(e){var n=e.split("\n"),t=c(a,n);t>0&&(n=["// ..."].concat(n.slice(t,-1)));var o=c(i,n);return o>0&&(n=[].concat(n.slice(0,o+1),["// ..."])),n.join("\n")})).then(u).catch(l.error)}),[]);var p="language-"+function(e){var n=e.split(".").pop();switch(n){case"jsx":return"jsx";case"tsx":return"tsx";case"ts":return"typescript";case"go":return"go";case"yaml":case"yml":return"yaml";case"js":return"javascript";case"html":return"html";case"pug":return"pug";default:return n}}(n),f='title="'+(t||function(e){var n=e.match(new RegExp("https://github.com/[^/]+/[^/]+/blob/[^/]+/(.+)","i"))||[];return n.length>=2?n[1]:e}(n))+'"';return a.createElement("div",{className:r},a.createElement(s.Z,{metastring:f,className:p,children:d}))}},32527:function(e,n,t){"use strict";t.d(n,{Z:function(){return f}});var a=t(67294),i=t(21140),o=t.n(i),s="graph_1lrJ",r="pointer_3d8u",l="overlay_2fuY",c="visible_2Z3U",d="backdrop_2z5L",u=t(94184),p=t.n(u);o().initialize({startOnLoad:!0,logLevel:"fatal",securityLevel:"strict",arrowMarkerAbsolute:!1,theme:"neutral",flowchart:{useMaxWidth:!0,htmlLabels:!0,rankSpacing:65,nodeSpacing:30,curve:"basis"},sequence:{useMaxWidth:!0},gantt:{useMaxWidth:!0}});var f=function(e){var n,t=e.chart,i=(0,a.useState)(!1),u=i[0],f=i[1],m=(0,a.useState)(void 0),h=m[0],g=m[1],w=(0,a.useState)("mermaid-"+Math.random().toString(36).substr(2,-1))[0],v=function(){return f(!u)};return(0,a.useEffect)((function(){o().render(w,t,(function(e){g(e)}))}),[]),a.createElement(a.Fragment,null,a.createElement("div",{onClick:v,className:p()(s,r),dangerouslySetInnerHTML:{__html:h}}),a.createElement("div",{onClick:v,className:p()(l,r,s,(n={},n[c]=u,n))},a.createElement("div",{onClick:function(e){return e.stopPropagation()},className:p()(d,s),dangerouslySetInnerHTML:{__html:h}})))}},19582:function(e,n,t){"use strict";var a=t(67294),i=t(32527);n.Z=function(e){return a.createElement(i.Z,{chart:(n=e,t=n.flows,o=void 0===t?["login","registration","settings","..."]:t,s=n.interactions,r=void 0===s?['"Log in"','"Sign Up"','"Update Email"',"..."]:s,l=n.success,c=void 0===l?"Perform flow-specific action (e.g. create user, set session cookie, ...)":l,d=o.length>1?"<"+o.join("|")+">":""+o.join("|"),"\nsequenceDiagram\n  participant B as API Client\n  participant K as Ory Kratos\n\n  B->>K: REST GET /self-service/"+d+"/api\n  K--\x3e>K: Create and store new "+o.join(", ")+" flow\n  K->>B: HTTP 200 OK with flow as application/json payload\n  B--\x3e>B: Render form using e.g. Native iOS UI Elements\n  B--\x3e>B: User fills out forms, clicks e.g. "+r+"\n  B->>K: REST POST to e.g. /self-service/"+d+"?flow=...>\n  K--\x3e>K: Validates and processes payload\n  alt Form payload is valid\n    K->>B: "+c+"\n  else Form payload invalid\n    K--\x3e>K: Update and store flow (e.g. add form validation errors)\n    K->>B: Respond with e.g. HTTP 400 Bad Request and updated flow as payload\n    B--\x3e>B: Render form and validation errors using e.g. Native iOS UI Elements\n    B--\x3e>K: Repeat flow with input data, submit, validate, ...\n  end\n")});var n,t,o,s,r,l,c,d}},64923:function(e,n,t){"use strict";var a=t(67294),i=t(32527);n.Z=function(e){return a.createElement(a.Fragment,null,a.createElement(i.Z,{chart:(n=e,t=n.flows,o=void 0===t?["login","registration","settings","..."]:t,s=n.interactions,r=void 0===s?['"Log in"','"Sign Up"','"Update Email"',"..."]:s,l=n.success,c=void 0===l?"Perform flow-specific action (e.g. create user, set session cookie, ...)":l,d=o.length>1?"<"+o.join("|")+">":""+o.join("|"),"\nsequenceDiagram\n\n  participant B as Browser\n  participant K as Ory Kratos\n  participant A as Flow UI\n\n  B->>K: Follow link to /self-service/"+d+"/browser\n  K--\x3e>K: Create and store new "+o.join(", ")+" flow\n  K->>B: HTTP 302 Found <selfservice.flows."+d+".ui_url>?flow=<flow-id>\n\n  B->>A: Opens <selfservice.flows.<"+o.join("|")+">.ui_url>?flow=<flow-id>\n  A--\x3e>K: Fetches data to render forms using /selfservice/"+d+"/flows?id=<flow-id>\n  B--\x3e>A: Fills out forms, clicks e.g. "+r.join(", ")+"\n  B->>K: Submits form\n  K--\x3e>K: Validates and processes form payloads\n\n  alt Form payload is valid\n    K->>B: "+c+"\n  else Form payload invalid\n    K--\x3e>K: Update and store flow (e.g. add form validation errors)\n    K--\x3e>B: HTTP 302 Found <selfservice.flows."+d+".ui_url>?flow=<flow-id>\n    B->>A: Opens <selfservice.flows."+d+"?flow=<flow-id>\n    A--\x3e>K: Fetches data to render form fields and errors\n    B->>K: Repeat flow with input data, submit, validate, ...\n  end\n")}),a.createElement("p",null,"The ",a.createElement("em",null,"Flow UI")," (",a.createElement("strong",null,"your application!"),') is responsible for rendering the actual Login and Registration HTML Forms. You can of course implement one app for rendering all the Login, Registration, ... screens, and another app (think "Service Oriented Architecture", "Micro-Services" or "Service Mesh") is responsible for rendering your Dashboards, Management Screens, and so on.'));var n,t,o,s,r,l,c,d}},79451:function(e,n,t){"use strict";t.d(n,{$0:function(){return a},ME:function(){return i},x1:function(){return o},wF:function(){return s},To:function(){return r}});var a={curl:{label:"Raw HTTP",language:"shell",code:t(59486).Z},html:{label:"HTML",language:"html",code:t(55247).Z},jsx:{label:"ReactJS",language:"js",code:t(90233).Z},node:{label:"ExpressJS",language:"html",code:t(53111).Z},angular:{label:"Angular",language:"js",code:t(29320).Z}},i={curl:{label:"Raw HTTP",language:"shell",code:t(6436).Z},js:{label:"JavaScript SDK",language:"js",code:t(1785).Z},go:{label:"Go SDK",language:"go",code:t(91580).Z}},o={curl:{label:"Raw HTTP",language:"shell",code:t(66190).Z},js:{label:"TypeScript",language:"ts",code:t(83493).Z},go:{label:"Go",language:"go",code:t(23963).Z}},s={browser:{label:"Browser UI",image:t(11432).Z,alt:"User Login HTML Form with validation errors"},missing:{label:"Missing Email",language:"shell",code:t(3856).Z},wrong:{label:"Wrong Credentials",language:"shell",code:t(6461).Z}},r={missing:{label:"Missing ID Token",language:"shell",code:t(15768).Z}}},91253:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return f},metadata:function(){return m},toc:function(){return h},default:function(){return w}});var a=t(22122),i=t(19756),o=(t(67294),t(3905)),s=t(88821),r=t(12669),l=t(79451),c=t(64923),d=t(19582),u=["components"],p={id:"self-service",title:"Self-Service Flows",sidebar_label:"Concepts and Overview"},f=void 0,m={unversionedId:"self-service",id:"version-v0.6/self-service",isDocsHomePage:!1,title:"Self-Service Flows",description:"Ory Kratos implements flows that users perform themselves as opposed to",source:"@site/versioned_docs/version-v0.6/self-service.mdx",sourceDirName:".",slug:"/self-service",permalink:"/kratos/docs/self-service",editUrl:"https://github.com/ory/kratos/edit/master/docs/versioned_docs/version-v0.6/self-service.mdx",version:"v0.6",lastUpdatedBy:"aeneasr",lastUpdatedAt:1619690398,formattedLastUpdatedAt:"4/29/2021",frontMatter:{id:"self-service",title:"Self-Service Flows",sidebar_label:"Concepts and Overview"},sidebar:"version-v0.6/docs",previous:{title:"Threat Models and Security Profiles",permalink:"/kratos/docs/concepts/security"},next:{title:"User Registration",permalink:"/kratos/docs/self-service/flows/user-registration"}},h=[{value:"Performing Login, Registration, Settings, ... Flows",id:"performing-login-registration-settings--flows",children:[]},{value:"Browser Flows",id:"browser-flows",children:[{value:"Initialization and Redirect to UI",id:"initialization-and-redirect-to-ui",children:[]},{value:"Form Rendering",id:"form-rendering",children:[]},{value:"Form Submission and Payload Validation",id:"form-submission-and-payload-validation",children:[]}]},{value:"API Flows",id:"api-flows",children:[{value:"Initialization",id:"initialization",children:[]},{value:"Form Rendering",id:"form-rendering-1",children:[]},{value:"Form Submission and Payload Validation",id:"form-submission-and-payload-validation-1",children:[]}]}],g={toc:h};function w(e){var n=e.components,t=(0,i.Z)(e,u);return(0,o.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Ory Kratos implements flows that users perform themselves as opposed to\nadministrative intervention. Facebook and Google both provide self-service\nregistration and profile management features as you are able to make changes to\nyour profile and sign up yourself."),(0,o.kt)("p",null,"Most believe that user management systems are easy to implement because picking\nthe right password hashing algorithm and sending an account verification code is\na solvable challenge. The real complexity however hides in the details and\nattack vectors of self-service flows. Most data leaks happen because someone is\nable to exploit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"registration: with attack vectors such as account enumeration (), ...;"),(0,o.kt)("li",{parentName:"ul"},"login: phishing, account enumeration, leaked password databases, brute-force,\n...;"),(0,o.kt)("li",{parentName:"ul"},"user settings: account enumeration, account takeover, ...;"),(0,o.kt)("li",{parentName:"ul"},"account recovery: social engineering attacks, account takeover, spoofing, and\nso on.")),(0,o.kt)("p",null,"There are also many other areas you need to think about, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Mobile, Smart TV, ... authentication"),(0,o.kt)("li",{parentName:"ul"},'Linking and unlinking social profiles (e.g. "Sign in with Google" or "Connect\nwith Google") to existing accounts')),(0,o.kt)("p",null,"Ory Kratos applies best practices established by experts (National Institute of\nSciences NIST, Internet Engineering Task Force IETF, Microsoft Research, Google\nResearch, Troy Hunt, ...) and implements the following flows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/user-registration"},"Registration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/user-login"},"Login")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/user-logout"},"Logout")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/user-settings"},"User Settings")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/account-recovery"},"Account Recovery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/verify-email-account-activation"},"Address Verification")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/user-facing-errors"},"User-Facing Error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/kratos/docs/self-service/flows/2fa-mfa-multi-factor-authentication"},"2FA / MFA"))),(0,o.kt)("p",null,'Some flows break down into "flow methods" which implement some of the flow\'s\nbusiness logic:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"password"),' method implements the login and registration with "email or/and\nusername and password" method, and "change your password" user settings\nmethod.'),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"oidc"),' (OpenID Connect, OAuth2, Social Sign In) method implements "Sign in\nwith ..." login and registration method and "un/link another social account"\nuser settings method.'),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"profile"),' method implements the "update your profile", "change your\nfirst/last name, ..." user settings method).'),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"link"),' method implements the "click this link to reset your password"\naccount recovery method.')),(0,o.kt)("p",null,"Some flows additionally implement the ability\n",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/hooks"},"to run hooks")," which allow users to be immediately\nsigned in after registration, notify another system on successful registration\n(e.g. Mailchimp), and so on."),(0,o.kt)("h2",{id:"performing-login-registration-settings--flows"},"Performing Login, Registration, Settings, ... Flows"),(0,o.kt)("p",null,"There are two flow types supported in Ory Kratos:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Flows where the user sits in front of the Browser (e.g. website, single page\napp, ...)"),(0,o.kt)("li",{parentName:"ul"},"Flows where API interaction is required (e.g. mobile app, Smart TV, ...)")),(0,o.kt)("p",null,"All Self-Service Flows (",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/flows/user-login"},"User Login"),",\n",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/flows/user-registration"},"User Registration"),",\n",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/flows/user-settings"},"Profile Management"),",\n",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/flows/account-recovery"},"Account Recovery"),",\n",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/flows/verify-email-account-activation"},"Email or Phone verification"),")\nsupport these two flow types and use the same data models but do use different\nAPI endpoints."),(0,o.kt)(s.Z,{mdxType:"ApiWarning"}),(0,o.kt)("h2",{id:"browser-flows"},"Browser Flows"),(0,o.kt)("p",null,"Browser-based flows make use of three core HTTP technologies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTTP Redirects"),(0,o.kt)("li",{parentName:"ul"},"HTTP POST (",(0,o.kt)("inlineCode",{parentName:"li"},"application/x-www-urlencoded"),") and REST GET requests."),(0,o.kt)("li",{parentName:"ul"},"HTTP Cookies to prevent CSRF and Session Hijaking attack vectors.")),(0,o.kt)("p",null,"The browser flow is the easiest and most secure to set up and integrated with.\nOry Kratos takes care of all required session and CSRF cookies and ensures that\nall security requirements are fulfilled."),(0,o.kt)("p",null,"The browser flow has three stages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Initialization and redirect to UI;"),(0,o.kt)("li",{parentName:"ul"},"Form rendering;"),(0,o.kt)("li",{parentName:"ul"},"Form submission and payload validation.")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The payloads, examples, ports, and IPs shown here are the ones used if you run\nthe ",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/quickstart"},"Quickstart"),". If you have not checked it out yet, please do\nso before reading this document."))),(0,o.kt)(c.Z,{flows:["login","settings","..."],mdxType:"SelfServiceBrowserFlow"}),(0,o.kt)("h3",{id:"initialization-and-redirect-to-ui"},"Initialization and Redirect to UI"),(0,o.kt)("p",null,"First, the Browser opens the flow's initialization endpoint\n(e.g.",(0,o.kt)("inlineCode",{parentName:"p"},"/self-service/login/browser"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/self-service/registration/browser"),", ...):"),(0,o.kt)(r.Z,{items:l.$0,mdxType:"CodeTabs"}),(0,o.kt)("p",null,'The initialization endpoint creates a flow object and stores it in the database.\nThe flow object has an ID and contains additional information about the flow\nsuch as the login methods (e.g. "username/password" and "Sign in with Google")\nand their form data.'),(0,o.kt)("p",null,"Once stored, the Browser is HTTP 302 redirected to the flow's configured UI URL\n(e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"selfservice.flows.login.ui_url"),"), appending the flow ID as the ",(0,o.kt)("inlineCode",{parentName:"p"},"flow")," URL\nQuery Parameter. Also included will be might be some cookies such as Anti-CSRF\ncookies."),(0,o.kt)("p",null,"The response will look along the lines of:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ curl -s -v -X GET \\\n  -H "Accept: text/html" \\\n  http://127.0.0.1:4433/self-service/login/browser\n\n# Response Headers\n< HTTP/1.1 302 Found\n< Cache-Control: 0\n< Content-Type: text/html; charset=utf-8\n< Location: http://127.0.0.1:4455/auth/login?flow=f6209031-38d5-48bc-b6a5-118e8a24d1fe\n< Set-Cookie: csrf_token=qhMCbVX6iDyw1x/701zlINVFFqfkZrq1t/Z27Z1uFDw=; Path=/.ory/kratos/public/; Domain=127.0.0.1; Max-Age=31536000; HttpOnly\n< Vary: Cookie\n< Date: Mon, 17 Aug 2020 13:54:52 GMT\n< Content-Length: 97\n')),(0,o.kt)("h3",{id:"form-rendering"},"Form Rendering"),(0,o.kt)("p",null,"The Browser opens the URL (here\n",(0,o.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:4455/auth/login?flow=f6209031-38d5-48bc-b6a5-118e8a24d1fe"),')\nwhich renders the HTML form which for example shows the "username and password"\nfield, the "Update your email address" field, or other flow forms. This HTML\nform is rendered be the\n',(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/concepts/ui-user-interface#self-service-user-interface-ssui"},"Self-Service UI"),"\nwhich you fully control."),(0,o.kt)("p",null,"The endpoint responsible for the UI URL uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"flow")," URL Query Parameter\n(here ",(0,o.kt)("inlineCode",{parentName:"p"},"...?flow=f6209031-38d5-48bc-b6a5-118e8a24d1fe"),") to call the flow\ninformation endpoint (e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:4434/self-service/login/flows?id=f6209031-38d5-48bc-b6a5-118e8a24d1fe"),")\nand fetch the flow data - so for example the login form and any validation\nerrors. This endpoint is available at both Ory Kratos's Public and Admin\nEndpoints. For example, the Self-Service UI responsible for rendering the Login\nHTML Form would make a request along the lines of:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# The endpoint uses Ory Kratos\' REST API to fetch information about the request\n$ curl -s -X GET \\\n    -H "Accept: application/json" \\\n    "http://127.0.0.1:4434/self-service/login/flows?id=f6209031-38d5-48bc-b6a5-118e8a24d1fe" | jq\n')),(0,o.kt)("p",null,"The result includes login methods, their fields, and additional information\nabout the flow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "f6209031-38d5-48bc-b6a5-118e8a24d1fe",\n  "type": "browser",\n  "expires_at": "2021-04-28T09:00:57.10254633Z",\n  "issued_at": "2021-04-28T08:50:57.10254633Z",\n  "request_url": "http://127.0.0.1:4433/self-service/login/browser",\n  "ui": {\n    "action": "http://127.0.0.1:4433/self-service/login?flow=f6209031-38d5-48bc-b6a5-118e8a24d1fe",\n    "method": "POST",\n    "nodes": [\n      {\n        "type": "input",\n        "group": "default",\n        "attributes": {\n          "name": "csrf_token",\n          "type": "hidden",\n          "value": "pUhD8lmSNNRnX/tuy6yAM317SfdiPOwetYUKnx23iTHnySErkBGJwaF1t3cEqNtxF3uC7W5A/dwP5l5VDYFRSA==",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {}\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password_identifier",\n          "type": "text",\n          "value": "",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070004,\n            "text": "ID",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password",\n          "type": "password",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070001,\n            "text": "Password",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "method",\n          "type": "submit",\n          "value": "password",\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1010001,\n            "text": "Sign in",\n            "type": "info",\n            "context": {}\n          }\n        }\n      }\n    ]\n  },\n  "forced": false\n}\n')),(0,o.kt)("p",null,"For more details, check out the individual flow documentation."),(0,o.kt)("p",null,"The flow UI then renders the given methods. For the example above, a suitable\nHTML Form would look along the lines of:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<form\n  action="http://127.0.0.1:4433/self-service/login?flow=f6209031-38d5-48bc-b6a5-118e8a24d1fe"\n  method="POST"\n>\n  <input\n    name="csrf_token"\n    type="hidden"\n    value="pUhD8lmSNNRnX/tuy6yAM317SfdiPOwetYUKnx23iTHnySErkBGJwaF1t3cEqNtxF3uC7W5A/dwP5l5VDYFRSA=="\n  />\n  <fieldset>\n    <label>\n      <input name="password_identifier" type="text" value="" placeholder="ID" />\n      <span>ID</span>\n    </label>\n  </fieldset>\n  <fieldset>\n    <label>\n      <input name="password" type="password" value="" placeholder="Password" />\n      <span>Password</span>\n    </label>\n  </fieldset>\n  <button name="method" type="submit" value="password">Sign in</button>\n</form>\n')),(0,o.kt)("h3",{id:"form-submission-and-payload-validation"},"Form Submission and Payload Validation"),(0,o.kt)("p",null,"The user completes the flow by submitting the form. The form action always\npoints to Ory Kratos directly. The business logic for the flow method will then\nvalidate the form payload and return to the UI URL on validation errors. The UI\nthen fetches the information about the flow again"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# The endpoint uses Ory Kratos\' REST API to fetch information about the request\n$ curl -s -X GET \\\n    -H "Accept: application/json" \\\n    "http://127.0.0.1:4433/self-service/login/flows?id=f6209031-38d5-48bc-b6a5-118e8a24d1fe" | jq\n')),(0,o.kt)("p",null,"which now includes validation errors and other potential messages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json5"},"{\n  id: 'f6209031-38d5-48bc-b6a5-118e8a24d1fe',\n  type: 'browser',\n  expires_at: '2021-04-28T09:00:57.10254633Z',\n  issued_at: '2021-04-28T08:50:57.10254633Z',\n  request_url: 'http://127.0.0.1:4433/self-service/login/browser',\n  ui: {\n    action: 'http://127.0.0.1:4433/self-service/login?flow=f6209031-38d5-48bc-b6a5-118e8a24d1fe',\n    method: 'POST',\n    nodes: [\n      // ...\n      {\n        type: 'input',\n        group: 'password',\n        attributes: {\n          name: 'password_identifier',\n          type: 'text',\n          value: '',\n          required: true,\n          disabled: false\n        },\n        messages: [\n          {\n            id: 4000001,\n            text: 'length must be >= 1, but got 0',\n            type: 'error'\n          }\n        ],\n        meta: {\n          label: {\n            id: 1070004,\n            text: 'ID',\n            type: 'info'\n          }\n        }\n      },\n      {\n        type: 'input',\n        group: 'password',\n        attributes: {\n          name: 'password',\n          type: 'password',\n          required: true,\n          disabled: false\n        },\n        messages: [\n          {\n            id: 4000001,\n            text: 'length must be >= 1, but got 0',\n            type: 'error'\n          }\n        ],\n        meta: {\n          label: {\n            id: 1070001,\n            text: 'Password',\n            type: 'info'\n          }\n        }\n      }\n      // ...\n    ]\n  },\n  forced: false\n}\n")),(0,o.kt)("p",null,"If a system error (e.g. broken configuration file) occurs, the browser is\nredirected to the ",(0,o.kt)("a",{parentName:"p",href:"/kratos/docs/self-service/flows/user-facing-errors"},"Error UI"),"."),(0,o.kt)("p",null,"If the form payload is valid, the flow completes with a success. The result here\ndepends on the flow itself - the login flow for example redirects the user to a\nspecified redirect URL and sets a session cookie. The registration flow also\nredirects to a specified redirect URL but only creates the user in the database\nand might issue a session cookie if configured to do so."),(0,o.kt)("h2",{id:"api-flows"},"API Flows"),(0,o.kt)(s.Z,{mdxType:"ApiWarning"}),(0,o.kt)("p",null,"API flows have three stages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Initialization ",(0,o.kt)("strong",{parentName:"li"},"without redirect")),(0,o.kt)("li",{parentName:"ul"},"Form rendering using e.g. native iOS, Android, ... components"),(0,o.kt)("li",{parentName:"ul"},"Form submission as ",(0,o.kt)("inlineCode",{parentName:"li"},"application/json")," and payload validation")),(0,o.kt)("p",null,"The high-level sequence diagram for API flows looks as follows:"),(0,o.kt)(d.Z,{mdxType:"SelfServiceApiFlow"}),(0,o.kt)("h3",{id:"initialization"},"Initialization"),(0,o.kt)("p",null,"The client (e.g. mobile application) makes a request to the flow's\ninitialization endpoint (e.g.",(0,o.kt)("inlineCode",{parentName:"p"},"/self-service/login/api"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"/self-service/registration/api"),", ...):"),(0,o.kt)(r.Z,{items:l.x1,mdxType:"CodeTabs"}),(0,o.kt)("p",null,'The initialization endpoint creates a flow object and stores it in the database.\nThe flow object has an ID and contains additional information about the flow\nsuch as the login methods (e.g. "username/password" and "Sign in with Google")\nand their form data.'),(0,o.kt)("h3",{id:"form-rendering-1"},"Form Rendering"),(0,o.kt)("p",null,"While the Browser flow redirects the client and uses cookies to protect against\nCSRF and session hijacking attacks, the API flow answers with a fresh flow\nformatted as ",(0,o.kt)("inlineCode",{parentName:"p"},"application/json")," right away. The client would then use that\ninformation to render the UI. In React Native, this may look like the following\nsnippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useState, useEffect } from 'react'\nimport { Text, TextInput, View } from 'react-native'\nimport { PublicApi, LoginFlow } from '@ory/kratos-client'\n\nconst kratos = new PublicApi('http://127.0.0.1:4455/.ory/kratos/public')\n\nexport default function Login () {\n  const [flow, setFlow] = useState<LoginFlow | undefined>(undefined)\n\n  useEffect(() => {\n    kratos.initializeSelfServiceAPILoginFlow().then(({ data: flow }) => {\n      setFlow(flow)\n    })\n  }, [])\n\n  if (!flow) {\n    return null\n  }\n\n  // This is a non-functional, code example. It is missing state management and so on.\n  // The idea is to show how initializing such a flow would look like in an API scenario.\n  return (\n    <View>\n      <Text>Login</Text>\n\n      {flow.ui.nodes.map((node) => {\n        switch (node.type) {\n          case 'input':\n            return <TextInput value={node.attributes.value} /* placeholder, name, ... *//>\n          default:\n            // ...\n        }\n      })}\n    </>\n  )\n}\n")),(0,o.kt)("p",null,"If needed, the client can re-request the flow using the same HTTP Request as the\nbrowser flow at the Public API endpoint:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'curl -s -X GET \\\n    -H "Accept: application/json" \\\n    "http://127.0.0.1:4433/self-service/login/flows?id=41ebf1e9-79f5-4b97-b643-04bfc405f8ad" | jq\n\n{\n  "id": "41ebf1e9-79f5-4b97-b643-04bfc405f8ad",\n  "type": "api",\n  # ...\n')),(0,o.kt)("h3",{id:"form-submission-and-payload-validation-1"},"Form Submission and Payload Validation"),(0,o.kt)("p",null,"The request is then completed by sending the form formatted as\n",(0,o.kt)("inlineCode",{parentName:"p"},"application/json")," to the action endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'flow=$(curl -s -X GET -H "Accept: application/json" "http://127.0.0.1:4433/self-service/login/api")\nactionUrl=$(echo $flow | jq -r \'.ui.action\')\n\necho $actionUrl\n# http://127.0.0.1:4433/self-service/login?flow=6394ffa4-235f-4c1a-a200-e62f89862015\n\ncurl -s -X POST -H  "Accept: application/json" -H "Content-Type: application/json" \\\n    -d \'{"password_identifier": "i-do-not-exist@user.org", "password": "the-wrong-password", "method": "password"}\' \\\n    "$actionUrl" | jq\n')),(0,o.kt)("p",null,"which in this case fails with a 400 Bad Request error and the following payload:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "6394ffa4-235f-4c1a-a200-e62f89862015",\n  "type": "api",\n  "expires_at": "2021-04-28T09:12:48.462374732Z",\n  "issued_at": "2021-04-28T09:02:48.462374732Z",\n  "request_url": "http://127.0.0.1:4433/self-service/login/api",\n  "ui": {\n    "action": "http://127.0.0.1:4433/self-service/login?flow=6394ffa4-235f-4c1a-a200-e62f89862015",\n    "method": "POST",\n    "messages": [\n      {\n        "id": 4000006,\n        "text": "The provided credentials are invalid, check for spelling mistakes in your password or username, email address, or phone number.",\n        "type": "error",\n        "context": {}\n      }\n    ],\n    "nodes": [\n      {\n        "type": "input",\n        "group": "default",\n        "attributes": {\n          "name": "csrf_token",\n          "type": "hidden",\n          "value": "",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {}\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password_identifier",\n          "type": "text",\n          "value": "i-do-not-exist@user.org",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070004,\n            "text": "ID",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password",\n          "type": "password",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070001,\n            "text": "Password",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "method",\n          "type": "submit",\n          "value": "password",\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1010001,\n            "text": "Sign in",\n            "type": "info",\n            "context": {}\n          }\n        }\n      }\n    ]\n  },\n  "forced": false\n}\n')),(0,o.kt)("p",null,"On success, that endpoint would typically return a HTTP 200 Status OK response\nwith the success ",(0,o.kt)("inlineCode",{parentName:"p"},"application/json")," response payload in the body."))}w.isMDXComponent=!0},11748:function(e,n,t){var a={"./locale":89234,"./locale.js":89234};function i(e){var n=o(e);return t(n)}function o(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=o,e.exports=i,i.id=11748},83300:function(e,n){"use strict";var t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();e.exports=n=t.fetch,t.fetch&&(n.default=t.fetch.bind(t)),n.Headers=t.Headers,n.Request=t.Request,n.Response=t.Response},66190:function(e,n){"use strict";n.Z='$ curl -s -X GET \\\n    -H "Accept: application/json"  \\\n    http://127.0.0.1:4433/self-service/login/api | jq\n\n{\n  "id": "cc24b30b-c0a8-46f5-a929-304371e92e46",\n  "type": "api",\n  "expires_at": "2021-04-28T10:02:34.102190388Z",\n  "issued_at": "2021-04-28T09:52:34.102190388Z",\n  "request_url": "http://127.0.0.1:4433/self-service/login/api",\n  "ui": {\n    "action": "http://127.0.0.1:4433/self-service/login?flow=cc24b30b-c0a8-46f5-a929-304371e92e46",\n    "method": "POST",\n    "nodes": [\n      {\n        "type": "input",\n        "group": "default",\n        "attributes": {\n          "name": "csrf_token",\n          "type": "hidden",\n          "value": "",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {}\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password_identifier",\n          "type": "text",\n          "value": "",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070004,\n            "text": "ID",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password",\n          "type": "password",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070001,\n            "text": "Password",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "method",\n          "type": "submit",\n          "value": "password",\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1010001,\n            "text": "Sign in",\n            "type": "info",\n            "context": {}\n          }\n        }\n      }\n    ]\n  },\n  "forced": false\n}\n'},23963:function(e,n){"use strict";n.Z='package api\n\nimport (\n  "fmt"\n\n  "github.com/ory/kratos-client-go"\n)\n\nfunc NewKratosClient(endpoint string) *kratos.APIClient {\n  conf := kratos.NewConfiguration()\n  conf.Servers = kratos.ServerConfigurations{{URL: endpoint}}\n  return kratos.NewAPIClient(conf)\n}\n\nfunc main() {\n  c := NewKratosClient("http://127.0.0.1:4433/")\n  flow, _, err := c.PublicApi.InitializeSelfServiceLoginViaAPIFlow(context.Background()).Execute()\n  if err != nil {\n    // ...\n  }\n\n  fmt.Printf("%+v", flow)\n}\n'},83493:function(e,n){"use strict";n.Z="import { Configuration, PublicApi } from '@ory/kratos-client';\nconst kratos = new PublicApi(new Configuration({ basePath: 'http://127.0.0.1:4433/' }));\n\nkratos.initializeSelfServiceLoginViaAPIFlow()\n  .then(({ data: flow }) => {\n    console.log(flow) // see the Raw HTTP tab for the payload\n  })\n"},59486:function(e,n){"use strict";n.Z='curl -s -v -X GET \\\n  -H "Accept: text/html"  \\\n  http://127.0.0.1:4433/self-service/login/browser\n\n> GET /self-service/login/browser HTTP/1.1\n> Host: 127.0.0.1:4433\n> User-Agent: curl/7.64.1\n> Accept: text/html\n>\n< HTTP/1.1 302 Found\n< Cache-Control: 0\n< Content-Type: text/html; charset=utf-8\n< Location: http://127.0.0.1:4455/auth/login?flow=df607aa1-d555-4b2a-b3e4-0f5a1d2fe6f3\n< Set-Cookie: csrf_token=y4Ocu6V83BapwJwbPw/pnlRHHw40DZbjq5iuDrxl0Ds=; Path=/; Domain=127.0.0.1; Max-Age=31536000; HttpOnly\n<\n<a href="http://127.0.0.1:4455/auth/login?flow=df607aa1-d555-4b2a-b3e4-0f5a1d2fe6f3">Found</a>.\n'},55247:function(e,n){"use strict";n.Z='<a href="http://127.0.0.1:4433/self-service/login/browser">Log in</a>\n\n\x3c!-- or --\x3e\n\n<script>\n  const initLogin = () => {\n    window.location.href = \'http://127.0.0.1:4433/self-service/login/browser\'\n  }\n<\/script>\n\n<a onClick="initLogin">Sign in</a>\n'},53111:function(e,n){"use strict";n.Z="express.get('/login', function (req, res) {\n  res.redirect(302, 'http://127.0.0.1:4433/self-service/login/browser')\n})\n"},90233:function(e,n){"use strict";n.Z="import React from 'react'\n\nconst MyComponent = () => (\n  <a href=\"http://127.0.0.1:4433/self-service/login/browser\">Sign in</a>\n)\n"},29320:function(e,n){"use strict";n.Z='<a href="http://127.0.0.1:4433/self-service/login/browser">Log in</a>\n'},6436:function(e,n){"use strict";n.Z='$ curl -H "Accept: application/json" -s \\\n    \'http://127.0.0.1:4434/self-service/login/flows?id=42e26bc5-8014-400c-b463-dc5c3738c242\' | jq\n\n{\n  "id": "42e26bc5-8014-400c-b463-dc5c3738c242",\n  "type": "browser",\n  "expires_at": "2021-04-28T10:04:44.506336771Z",\n  "issued_at": "2021-04-28T09:54:44.506336771Z",\n  "request_url": "http://127.0.0.1:4433/self-service/login/browser",\n  "ui": {\n    "action": "http://127.0.0.1:4433/self-service/login?flow=42e26bc5-8014-400c-b463-dc5c3738c242",\n    "method": "POST",\n    "nodes": [\n      {\n        "type": "input",\n        "group": "default",\n        "attributes": {\n          "name": "csrf_token",\n          "type": "hidden",\n          "value": "8RygCHIdyMXVc3jxIAf/6uAuv/jBJLo5mt6nXdcB/JOzncLRu5510BNZNOjvA6Soii504s1Yq/sgvfOXxzck6g==",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {}\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password_identifier",\n          "type": "text",\n          "value": "",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070004,\n            "text": "ID",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "password",\n          "type": "password",\n          "required": true,\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1070001,\n            "text": "Password",\n            "type": "info"\n          }\n        }\n      },\n      {\n        "type": "input",\n        "group": "password",\n        "attributes": {\n          "name": "method",\n          "type": "submit",\n          "value": "password",\n          "disabled": false\n        },\n        "messages": null,\n        "meta": {\n          "label": {\n            "id": 1010001,\n            "text": "Sign in",\n            "type": "info",\n            "context": {}\n          }\n        }\n      }\n    ]\n  },\n  "forced": false\n}\n'},91580:function(e,n){"use strict";n.Z='package samples\n\nimport (\n  "fmt"\n\n  "github.com/ory/kratos-client-go"\n)\n\nfunc NewKratosClient(endpoint string) *kratos.APIClient {\n  conf := kratos.NewConfiguration()\n  conf.Servers = kratos.ServerConfigurations{{URL: endpoint}}\n  return kratos.NewAPIClient(conf)\n}\n\nfunc main() {\n  ctx := context.Background()\n  flowID := "" // Usually something like: res.Request.URL.Query().Get("flow")\n\n  c := NewKratosClient("http://127.0.0.1:4433/")\n  flow, _, err := c.PublicApi.GetSelfServiceLoginFlow().Id(flowID).Execute()\n  if err != nil {\n    // ...\n  }\n\n  fmt.Printf("%+v", flow)\n}\n'},1785:function(e,n){"use strict";n.Z="import { Configuration, PublicApi } from '@ory/kratos-client';\nconst kratos = new PublicApi(new Configuration({ basePath: 'http://127.0.0.1:4433/' }));\n\nconst flowId = '' // usually something like: req.query.flow\n\nreturn kratos.getSelfServiceLoginFlow(flowId)\n  .then(({ status, data: flow, ...response }) => {\n    console.log(flow) // see the Raw HTTP tab for the payload\n  })\n"},15768:function(e,n){"use strict";n.Z='$ curl -s -H "Accept: application/json" \\\n    \'http://127.0.0.1:4433/self-service/login/flows?id=76cec270-1719-4c9e-b09a-4af8281d511e\' \\\n    | jq -r \'.ui.messages\'\n\n[\n  {\n    "id": 4000001,\n    "text": "Authentication failed because no id_token was returned. Please accept the \\"openid\\" permission and try again.",\n    "type": "error"\n  }\n]\n'},3856:function(e,n){"use strict";n.Z='$ curl -H "Accept: application/json" -s \\\n    \'http://127.0.0.1:4433/self-service/login/flows?id=a2d6e166-5153-42a6-8943-ef99eba8ab2e\' \\\n    | jq -r \'.ui.nodes[] | select(.attributes.name=="password_identifier")\'\n\n{\n  "type": "input",\n  "group": "password",\n  "attributes": {\n    "name": "password_identifier",\n    "type": "text",\n    "value": "",\n    "required": true,\n    "disabled": false\n  },\n  "messages": [\n    {\n      "id": 4000001,\n      "text": "length must be >= 1, but got 0",\n      "type": "error"\n    }\n  ],\n  "meta": {\n    "label": {\n      "id": 1070004,\n      "text": "ID",\n      "type": "info"\n    }\n  }\n}\n'},6461:function(e,n){"use strict";n.Z='$ curl -H "Accept: application/json" -s \\\n    \'http://127.0.0.1:4433/self-service/login/flows?id=a2d6e166-5153-42a6-8943-ef99eba8ab2e\' \\\n    | jq -r \'.ui.messages\'\n\n[\n  {\n    "id": 4000006,\n    "text": "The provided credentials are invalid, check for spelling mistakes in your password or username, email address, or phone number.",\n    "type": "error",\n    "context": {}\n  }\n]\n'},11432:function(e,n,t){"use strict";n.Z=t.p+"assets/images/browser-error-b6509d4065a4bfb5ab01e37a0389a65f.png"}}]);