(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{120:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(3),i=n(8),o=(n(0),n(552)),r={id:"sign-in-with-github-google-facebook-linkedin",title:"Sign in with GitHub, GitLab, Google, Facebook, LinkedIn, Microsoft ..."},c={unversionedId:"guides/sign-in-with-github-google-facebook-linkedin",id:"guides/sign-in-with-github-google-facebook-linkedin",isDocsHomePage:!1,title:"Sign in with GitHub, GitLab, Google, Facebook, LinkedIn, Microsoft ...",description:'In this document we will take a look at setting up "Sign in with GitHub" using',source:"@site/docs/guides/sign-in-with-github-google-facebook-linkedin.mdx",sourceDirName:"guides",slug:"/guides/sign-in-with-github-google-facebook-linkedin",permalink:"/kratos/docs/next/guides/sign-in-with-github-google-facebook-linkedin",editUrl:"https://github.com/ory/kratos/edit/master/docs/docs/guides/sign-in-with-github-google-facebook-linkedin.mdx",version:"current",lastUpdatedBy:"aeneasr",lastUpdatedAt:1619624197,formattedLastUpdatedAt:"4/28/2021",frontMatter:{id:"sign-in-with-github-google-facebook-linkedin",title:"Sign in with GitHub, GitLab, Google, Facebook, LinkedIn, Microsoft ..."},sidebar:"docs",previous:{title:"Managing Users and Identities",permalink:"/kratos/docs/next/admin/managing-users-identities"},next:{title:"Configuring And Checking for Login Sessions",permalink:"/kratos/docs/next/guides/login-session"}},s=[{value:"Discord",id:"discord",children:[]},{value:"Slack",id:"slack",children:[]},{value:"GitHub",id:"github",children:[]},{value:"GitLab",id:"gitlab",children:[]},{value:"Microsoft",id:"microsoft",children:[]},{value:"Twitch",id:"twitch",children:[]},{value:"Facebook",id:"facebook",children:[]},{value:"Google",id:"google",children:[]},{value:"LinkedIn",id:"linkedin",children:[]}],l={toc:s};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,'In this document we will take a look at setting up "Sign in with GitHub" using\nOry Kratos.'),Object(o.b)("p",null,"Run the ",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/quickstart"},"Quickstart")," with Docker Compose:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'# This assumes that you have Ory Kratos checked out locally and\n# that your current directory ("pwd") is the folder where Ory Kratos\n# is.\n\n$ make quickstart\n')),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},'It is very important to add the "session" hook to the after oidc registration\nhooks. Otherwise your users need to use the login flow again to be able to get a\nsession.'),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="path/to/my/kratos/config.yml"',title:'"path/to/my/kratos/config.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  flows:\n    registration:\n      after:\n        oidc:\n          hooks:\n            - hook: session\n")))),Object(o.b)("h2",{id:"discord"},"Discord"),Object(o.b)("p",null,'To set up "Sign in with Discord" you must create a\n',Object(o.b)("a",{parentName:"p",href:"https://discord.com/developers/docs/topics/oauth2"},"Discord OAuth2 Application"),"."),Object(o.b)("p",null,'Set the "Redirect URI" to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http://127.0.0.1:4433/self-service/methods/oidc/callback/discord\n")),Object(o.b)("p",null,"The pattern of this URL is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http(s)://<domain-of-ory-kratos>:<public-port>/self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("p",null,"The provider ID must point to the provider's ID set in the Ory Kratos\nconfiguration file (explained in further detail at\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),")."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Discord does not implement OpenID Connect. Therefore, Ory Kratos makes a request\nto\n",Object(o.b)("a",{parentName:"p",href:"https://discord.com/developers/docs/resources/user#get-current-user"},"Discord's User API"),"\nand adds that data to ",Object(o.b)("inlineCode",{parentName:"p"},"std.extVar('claims')"),". However, not all fields are\nsupported. Check the list of supported fields\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/ory/kratos/blob/v0.5.1-alpha.1/selfservice/strategy/oidc/provider_discord.go#L81-L91"},"in Kratos' source code"),"."),Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"identify")," scope will add following fields:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"iss                 # always https://discord.com/api/v6/oauth2/\nsub                 # numeric discord user id\nname                # username + # + discriminator\nnickname            # username\npreferred_username  # username\npicture             # avatar url\nlocale              # user locale\n")),Object(o.b)("p",{parentName:"div"},"Additionally, the ",Object(o.b)("inlineCode",{parentName:"p"},"email")," scope will add:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"email               # user email\nemail_verified      # whether email is verified\n")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.discord.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.discord.jsonnet"'},'local claims = {\n  email_verified: false\n} + std.extVar(\'claims\');\n\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // Therefore we only return the email if it (a) exists and (b) is marked verified\n      // by Discord.\n      [if "email" in claims && claims.email_verified then "email" else null]: claims.email,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Now, enable the Discord provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: discord # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: discord\n            client_id: .... # Replace this with the OAuth2 Client ID provided by Discord\n            client_secret: .... # Replace this with the OAuth2 Client Secret provided by Discord\n            mapper_url: file:///etc/config/kratos/oidc.discord.jsonnet\n            scope:\n              - identify\n              - email\n")),Object(o.b)("p",null,"Discord is now an option to log in via Kratos."),Object(o.b)("h2",{id:"slack"},"Slack"),Object(o.b)("p",null,'To set up "Sign in with Slack" you must create a\n',Object(o.b)("a",{parentName:"p",href:"https://api.slack.com/apps"},"Slack OAuth Application"),"."),Object(o.b)("p",null,'Set the "Redirect URI" to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http://127.0.0.1:4433/self-service/methods/oidc/callback/slack\n")),Object(o.b)("p",null,"The pattern of this URL is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http(s)://<domain-of-ory-kratos>:<public-port>/self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("p",null,"The provider ID must point to the provider's ID set in the Ory Kratos\nconfiguration file (explained in further detail at\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),")."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Slack does not implement OpenID Connect. Therefore, Ory Kratos makes a request\nto ",Object(o.b)("a",{parentName:"p",href:"https://api.slack.com/methods/users.identity"},"Slack's Oauth2 API")," and adds\nthat data to ",Object(o.b)("inlineCode",{parentName:"p"},"std.extVar('claims')"),". However, not all fields are supported.\nCheck the list of supported fields\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/ory/kratos/blob/master/selfservice/strategy/oidc/provider_slack.go"},"in Kratos' source code"),"."),Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"identity.basic")," scope will add following fields:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"iss                 # always https://slack.com/oauth/\nsub                 # alphanumeric slack user id\nname                # username\nnickname            # username\npreferred_username  # username\n")),Object(o.b)("p",{parentName:"div"},"Additionally, the ",Object(o.b)("inlineCode",{parentName:"p"},"identity.email")," scope will add:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"email               # user email\nemail_verified      # always true\n")),Object(o.b)("p",{parentName:"div"},"Additionally, the ",Object(o.b)("inlineCode",{parentName:"p"},"identity.avatar")," scope will add:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-text"},"picture             # user avatar (512x512px)\n")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.discord.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.discord.jsonnet"'},"local claims = {\n  email_verified: true\n} + std.extVar('claims');\n\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // It is assumed that Slack requires a email to be verifed before accessable via Oauth (because they don't provide a email_verified field).\n      email: claims.email\n    },\n  },\n}\n")),Object(o.b)("p",null,"Now, enable the Slack provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: slack # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: slack\n            client_id: .... # Replace this with the OAuth2 Client ID provided by Slack\n            client_secret: .... # Replace this with the OAuth2 Client Secret provided by Slack\n            mapper_url: file:///etc/config/kratos/oidc.slack.jsonnet\n            scope:\n              - identity.basic\n              - identity.email\n")),Object(o.b)("p",null,"Slack is now an option to log in via Kratos."),Object(o.b)("h2",{id:"github"},"GitHub"),Object(o.b)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Hz_dP5c_qvc",frameborder:"0",allowfullscreen:!0}),Object(o.b)("p",null,'To set up "Sign in with GitHub" you must create a\n',Object(o.b)("a",{parentName:"p",href:"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"},"GitHub OAuth2 Client"),"."),Object(o.b)("p",null,'Set the "Authorization callback URL" to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http://127.0.0.1:4433/self-service/methods/oidc/callback/github\n")),Object(o.b)("p",null,"The pattern of this URL is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http(s)://<domain-of-ory-kratos>:<public-port>//self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("p",null,"The provider ID must point to the provider's ID set in the Ory Kratos\nconfiguration file (explained in further detail at\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),")."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"GitHub does not implement OpenID Connect. Therefore, Ory Kratos makes a request\nto\n",Object(o.b)("a",{parentName:"p",href:"https://developer.github.com/v3/users/#get-the-authenticated-user"},"GitHub's User API"),"\nand adds that data to ",Object(o.b)("inlineCode",{parentName:"p"},"std.extVar('claims')"),". Check out what data is available\nat\n",Object(o.b)("a",{parentName:"p",href:"https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/"},"GitHub's Scope Docs"),".\nNot all GitHub fields are supported however. Check the list of supported fields\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/ory/kratos/blob/v0.2.1-alpha.1/selfservice/strategy/oidc/provider_github.go#L72-L98"},"in Kratos' source code"),"."))),Object(o.b)("p",null,"As explained in\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),",\nyou must also create a Jsonnet code snippet for the provider. Save the code in\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/oidc.github.jsonnet"),".\nThe following JsonNet takes ",Object(o.b)("inlineCode",{parentName:"p"},"email_primary")," and maps it to ",Object(o.b)("inlineCode",{parentName:"p"},"traits.email"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.github.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.github.jsonnet"'},'local claims = {\n  email_verified: false\n} + std.extVar(\'claims\');\n\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // Therefore we only return the email if it (a) exists and (b) is marked verified\n      // by GitHub.\n      [if "email" in claims && claims.email_verified then "email" else null]: claims.email,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Now, enable the GitHub provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: github # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: github\n            client_id: .... # Replace this with the OAuth2 Client ID provided by GitHub\n            client_secret: .... # Replace this with the OAuth2 Client Secret provided by GitHub\n            mapper_url: file:///etc/config/kratos/oidc.github.jsonnet\n            scope:\n              - user:email\n")),Object(o.b)("p",null,"Next, open the login endpoint of the SecureApp and you should see the GitHub\nLogin option!"),Object(o.b)("h2",{id:"gitlab"},"GitLab"),Object(o.b)("p",null,'To set up "Sign in with GitLab" you must create a\n',Object(o.b)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/integration/oauth_provider.html#adding-an-application-through-the-profile"},"GitLab OAuth2 Application"),"."),Object(o.b)("p",null,'Set the "Redirect URI" to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http://127.0.0.1:4433/self-service/methods/oidc/callback/gitlab\n")),Object(o.b)("p",null,"The pattern of this URL is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http(s)://<domain-of-ory-kratos>:<public-port>/self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"While you can use\n",Object(o.b)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/integration/openid_connect_provider.html"},"GitLab as an OIDC identity provider"),",\nGitLab only returns the sub and sub_legacy claims in the ID token. Therefore,\nOry Kratos makes a request to\n",Object(o.b)("a",{parentName:"p",href:"https://gitlab.com/oauth/userinfo"},"GitLab's /oauth/userinfo API")," and adds the\nuser info to ",Object(o.b)("inlineCode",{parentName:"p"},"std.extVar('claims')"),"."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.gitlab.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.gitlab.jsonnet"'},'local claims = {\n  email_verified: false\n} + std.extVar(\'claims\');\n\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // Therefore we only return the email if it (a) exists and (b) is marked verified\n      // by GitLab.\n      [if "email" in claims && claims.email_verified then "email" else null]: claims.email,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Now, enable the GitLab provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: gitlab # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: gitlab\n            client_id: .... # Replace this with the OAuth2 Client ID provided by GitLab\n            client_secret: .... # Replace this with the OAuth2 Client Secret provided by GitLab\n            mapper_url: file:///etc/config/kratos/oidc.gitlab.jsonnet\n            scope:\n              - read_user\n              - openid\n              - profile\n              - email\n")),Object(o.b)("p",null,"GitLab is now an option to log in via Kratos."),Object(o.b)("h2",{id:"microsoft"},"Microsoft"),Object(o.b)("p",null,"This will enable you to log in using any Azure AD directory - Multitenant and\npersonal Microsoft accounts (e.g. Skype, Xbox) depending on the settings made\nwhen creating the application in Azure AD."),Object(o.b)("h4",{id:"creating-an-application-in-azure-ad"},"Creating an Application in Azure AD"),Object(o.b)("p",null,'To set up "Sign in with Microsoft" you must first\n',Object(o.b)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app"},"register an application with the Microsoft identity platform"),"."),Object(o.b)("p",null,'Select "Web" as the "Redirect URI" type, and set the URI to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http(s)://<domain-of-ory-kratos>:<public-port>//self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("p",null,'After the "App Registration" is created, make note of the ',Object(o.b)("inlineCode",{parentName:"p"},"Application ID")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"Directory ID"),' on top of the Overview page. To create the client secret,\nnavigate to "Certificates & secrets" and click "+ New client secret". Remember\nto copy the secret value as it will only be shown once.'),Object(o.b)("h4",{id:"configuring-kratos"},"Configuring Kratos"),Object(o.b)("p",null,"Create a Jsonnet claims mapper as described in\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),".\nSave the code in\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/oidc.microsoft.jsonnet"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.microsoft.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.microsoft.jsonnet"'},'local claims = std.extVar(\'claims\');\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // If connecting only to your organization (one tenant), claims.email is safe to use if you have not actively disabled e-mail verification during signup.\n      //\n      // The email might be empty if the account is not linked to an email address.\n      // For a human readable identifier, consider using the "preferred_username" claim.\n      [if "email" in claims then "email" else null]: claims.email,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Enable the Microsoft provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"selfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: microsoft # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: microsoft\n            client_id: .... # Replace this with the Application ID from the App Registration\n            client_secret: .... # Replace this with the generated Secret value from the App Registration\n            tenant: .... # Replace this with the Tenant of your choice (see below)\n            mapper_url: file:///etc/config/kratos/oidc.microsoft.jsonnet\n            scope:\n              - profile\n              - email\n")),Object(o.b)("p",null,"Azure AD is now an option to log in to kratos."),Object(o.b)("h5",{id:"choosing-tenant"},"Choosing Tenant"),Object(o.b)("p",null,"There are two ways to use the ",Object(o.b)("inlineCode",{parentName:"p"},"microsoft")," provider for authentication:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"For authenticating users in a single Azure AD Directory (organisation), set\nthe ",Object(o.b)("inlineCode",{parentName:"li"},"tenant")," value to either the ",Object(o.b)("inlineCode",{parentName:"li"},"Directory ID"),' from the "App Registration"\npage, or the organisation domain. E.g. ',Object(o.b)("inlineCode",{parentName:"li"},"8eaef023-2b34-4da1-9baa-8bc8c9d6a490"),"\nor ",Object(o.b)("inlineCode",{parentName:"li"},"contoso.onmicrosoft.com"),"."),Object(o.b)("li",{parentName:"ol"},"For authenticating any user in the Microsoft identity platform, set the\n",Object(o.b)("inlineCode",{parentName:"li"},"tenant")," value to either:")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"organizations")," to allow users with work or school accounts, or"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"consumers")," to allow users with personal accounts, or"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"common")," to allow both kind of accounts.")),Object(o.b)("h2",{id:"twitch"},"Twitch"),Object(o.b)("p",null,'To set up "Sign in with Twitch" you must create a\n',Object(o.b)("a",{parentName:"p",href:"https://dev.twitch.tv/docs/authentication#registration"},"Twitch OAuth2 Application"),"."),Object(o.b)("p",null,'Set the "Redirect URI" to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http://127.0.0.1:4433/self-service/methods/oidc/callback/twitch\n")),Object(o.b)("p",null,"The pattern of this URL is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"http(s)://<domain-of-ory-kratos>:<public-port>/self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("p",null,"The provider ID must point to the provider's ID set in the Ory Kratos\nconfiguration file (explained in further detail at\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),")."),Object(o.b)("p",null,"As explained in\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),",\nyou must also create a Jsonnet code snippet for the provider. Save the code in\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/oidc.twitch.jsonnet"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.twitch.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.twitch.jsonnet"'},'local claims = {\n  email_verified: false\n} + std.extVar(\'claims\');\n\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // Therefore we only return the email if it (a) exists and (b) is marked verified\n      // by Twitch.\n      [if "email" in claims && claims.email_verified then "email" else null]: claims.email,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Now, enable the Twitch provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: twitch # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: generic\n            client_id: .... # Replace this with the OAuth2 Client ID provided by Twitch\n            client_secret: .... # Replace this with the OAuth2 Client Secret provided by Twitch\n            issuer_url: https://id.twitch.tv/oauth2\n            mapper_url: file:///etc/config/kratos/oidc.twitch.jsonnet\n            scope:\n              - openid\n              - user:read:email # required for email and email_verified claims in the near future\n            requested_claims: # explicitly request email and email_verified claims because twitch doesn't add them by default\n              id_token:\n                email:\n                  essential: true\n                email_verified:\n                  essential: true\n")),Object(o.b)("p",null,"Next, open the login endpoint of the SecureApp and you should see the Twitch\nLogin option!"),Object(o.b)("h2",{id:"facebook"},"Facebook"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Create Facebook Application")),Object(o.b)("p",null,'To set up "Sign in with Facebook" you first need a\n',Object(o.b)("a",{parentName:"p",href:"https://developers.facebook.com/docs/development/register"},"Facebook Developer Account"),"."),Object(o.b)("p",null,"Create a\n",Object(o.b)("a",{parentName:"p",href:"https://developers.facebook.com/docs/development/create-an-app"},"Facebook OAuth2 Application"),"."),Object(o.b)("p",null,'Add a "Facebook Login" product to this application.'),Object(o.b)("p",null,'Select "Settings" in the Products menu.'),Object(o.b)("p",null,'Set the "Valid OAuth Redirect URIs" to:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"https://127.0.0.1:4433/self-service/methods/oidc/callback/facebook\n")),Object(o.b)("p",null,"The pattern of this URL is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"https://<domain-of-ory-kratos>:<public-port>/self-service/methods/oidc/callback/<provider-id>\n")),Object(o.b)("p",null,"Facebook requires https the redirect URIs!"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"While you can use\n",Object(o.b)("a",{parentName:"p",href:"https://developers.facebook.com/docs/facebook-login/"},"Facebook as an OIDC identity provider"),",\nFacebook only returns access_token and not id_token. Therefore, Ory Kratos makes\na request to\n",Object(o.b)("a",{parentName:"p",href:"https://graph.facebook.com/me"},"Facebook's graph.facebook.com/me API")," and adds\nthe user info to ",Object(o.b)("inlineCode",{parentName:"p"},"std.extVar('claims')"),"."))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Configuring Kratos")),Object(o.b)("p",null,"Create a Jsonnet claims mapper as described in\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),".\nSave the code in\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/oidc.facebook.jsonnet"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.facebook.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.facebook.jsonnet"'},'local claims = std.extVar(\'claims\');\n{\n  identity: {\n    traits: {\n      // Allowing unverified email addresses enables account\n      // enumeration attacks, especially if the value is used for\n      // e.g. verification or as a password login identifier.\n      //\n      // It is assumed that Facebook requires a email to be verifed before accessable via Oauth (because they don\'t provide an email_verified field).\n      //\n      // The email might be empty if the user is not allowed to an email scope.\n      [if "email" in claims then "email" else null]: claims.email,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Now, enable the Facebook provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: facebook # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: facebook\n            client_id: .... # Replace this with the OAuth2 Client ID provided by Facebook app\n            client_secret: .... # Replace this with the OAuth2 Client Secret provided by Facebook app\n            mapper_url: file:///etc/config/kratos/oidc.facebook.jsonnet\n            scope:\n              - email # required for email and email_verified claims in the near future\n                # other supported scopes: user_gender, user_birthday\n")),Object(o.b)("p",null,"Next, open the login endpoint of the SecureApp and you should see the Facebook\nLogin option!"),Object(o.b)("h2",{id:"google"},"Google"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Set up on Google Cloud Platform")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Create an\n",Object(o.b)("a",{parentName:"li",href:"https://console.cloud.google.com/apis/credentials/consent"},"OAuth consent screen")),Object(o.b)("li",{parentName:"ol"},"Create\n",Object(o.b)("a",{parentName:"li",href:"https://console.cloud.google.com/apis/credentials"},"OAuth 2.0 Client IDs"))),Object(o.b)("p",null,"In the new ",Object(o.b)("em",{parentName:"p"},"OAuth 2.0 Client ID"),", you will need the ",Object(o.b)("inlineCode",{parentName:"p"},"Client ID")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"Client secret"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Configuring Kratos")),Object(o.b)("p",null,"Create a Jsonnet claims mapper as described in\n",Object(o.b)("a",{parentName:"p",href:"/kratos/docs/next/concepts/credentials/openid-connect-oidc-oauth2"},"OpenID Connect and OAuth2 Credentials"),".\nSave the code in\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/oidc.google.jsonnet"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="contrib/quickstart/kratos/email-password/oidc.google.jsonnet"',title:'"contrib/quickstart/kratos/email-password/oidc.google.jsonnet"'},'local claims = {\n  email_verified: true\n} + std.extVar(\'claims\');\n\n{\n  identity: {\n    traits: {\n      [if "email" in claims && claims.email_verified then "email" else null]: claims.email,\n      // additional claims\n      // please also see the `Google specific claims` section\n      first_name: claims.given_name,\n      last_name: claims.family_name,\n      [if "hd" in claims && claims.email_verified then "hd" else null]: claims.hd,\n    },\n  },\n}\n')),Object(o.b)("p",null,"Now, enable the Google provider in the Ory Kratos config located at\n",Object(o.b)("inlineCode",{parentName:"p"},"<kratos-directory>/contrib/quickstart/kratos/email-password/kratos.yml"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="contrib/quickstart/kratos/email-password/kratos.yml"',title:'"contrib/quickstart/kratos/email-password/kratos.yml"'},"# $ kratos -c path/to/my/kratos/config.yml serve\nselfservice:\n  methods:\n    oidc:\n      enabled: true\n      config:\n        providers:\n          - id: google # this is `<provider-id>` in the Authorization callback URL. DO NOT CHANGE IT ONCE SET!\n            provider: google\n            client_id: .... # Replace this with the OAuth2 Client ID\n            client_secret: .... # Replace this with the OAuth2 Client secret\n            mapper_url: file:///etc/config/kratos/oidc.google.jsonnet\n            scope:\n              - email\n              - profile\n              # other supported scopes can be found in Google OAuth 2.0 dev docs\n            requested_claims:\n              id_token:\n                email:\n                  essential: true\n                email_verified:\n                  essential: true\n                given_name:\n                  essential: true\n                family_name: null\n                hd: null # If you want the G Suite domain\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Google specific claims")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"hd"),": The hosted G Suite domain of the user. Provided only if the user belongs\nto a hosted domain. For a given email account with custom domain\n",Object(o.b)("inlineCode",{parentName:"li"},"example.com")," - ",Object(o.b)("inlineCode",{parentName:"li"},"user1@example.com")," would produce ",Object(o.b)("inlineCode",{parentName:"li"},"example.com")," in the ",Object(o.b)("inlineCode",{parentName:"li"},"hd"),"\nclaim.")),Object(o.b)("p",null,"Please look at the Google developer documentation which can be found\n",Object(o.b)("a",{parentName:"p",href:"https://developers.google.com/identity/protocols/oauth2/openid-connect#an-id-tokens-payload"},"here"),"\n."),Object(o.b)("h2",{id:"linkedin"},"LinkedIn"),Object(o.b)("p",null,"Connecting with other Social Sign In providers will be very similar to the\nGitHub flow. If you've managed to do it, add to this document by writing it down\nand making a PR! :)"))}d.isMDXComponent=!0},552:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,u=p["".concat(r,".").concat(m)]||p[m]||b[m]||o;return n?i.a.createElement(u,c(c({ref:t},l),{},{components:n})):i.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);